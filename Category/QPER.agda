
module Category.QPER where

-- Type Universe Levels
open import Level using (Level) renaming (zero to lzero ; suc to lsuc)

-- Product Types
open import Data.Unit
open import Data.Product renaming (_√ó_ to _‚àß_) hiding (<_,_>)
open import Data.Product.Properties as Prod

-- Sum Types
open import Data.Empty 
open import Data.Sum renaming (_‚äé_ to _‚à®_) hiding ([_,_])
open import Data.Sum.Properties as Sum

-- Equality Types
open import Relation.Binary.PropositionalEquality as Eq using (_‚â°_)

-- Cartesian-Closed Categories
open import Category.CCC
open import Category.Type



-- I had to de-parameterize QPER's like this; I don't know how else to put them into a category.
record QPER' {l : Level} : Set (lsuc l) where 
  field
    Dom : Set l
    Cod : Set l
    Rel' : (a : Dom) (b : Cod) ‚Üí Set l
    zzc' : {a a' : Dom} {b b' : Cod} ‚Üí Rel' a b ‚Üí Rel' a' b' ‚Üí Rel' a' b ‚Üí Rel' a b'
open QPER' public

-- A helpful result is that we can re-parameterize them without much issue.

record QPER {l : Level} (A B : Set l) : Set (lsuc l) where
  field
    Rel : (a : A) (b : B) ‚Üí Set l
    zzc : {a a' : A} {b b' : B} ‚Üí Rel a b ‚Üí Rel a' b' ‚Üí Rel a' b ‚Üí Rel a b'
open QPER public

qper-to-qper' : ‚àÄ {l} {A B : Set l} ‚Üí QPER A B ‚Üí QPER'
Dom (qper-to-qper' {A = A} Q) = A
Cod (qper-to-qper' {B = B} Q) = B
Rel' (qper-to-qper' Q) = Rel Q
zzc' (qper-to-qper' Q) = zzc Q

qper'-to-qper : ‚àÄ {l} ‚Üí (Q : QPER' {l}) ‚Üí QPER (Dom Q) (Cod Q)
Rel (qper'-to-qper Q) = Rel' Q
zzc (qper'-to-qper Q) = zzc' Q

-- Example: Definitional equality on a type

Q‚â° : ‚àÄ {l} ‚Üí (A : Set l) ‚Üí QPER A A
Rel (Q‚â° A) = _‚â°_
zzc (Q‚â° A) Eq.refl Eq.refl Eq.refl = Eq.refl




record QPERMor {l : Level} (X : QPER' {l}) (Y : QPER' {l}) : Set l where
  field
    qf : Dom X ‚Üí Dom Y
    qf' : Cod X ‚Üí Cod Y
    law : {a : Dom X} {a' : Cod X} ‚Üí Rel' X a a' ‚Üí Rel' Y (qf a) (qf' a')
open QPERMor public

QPERCCC : ‚àÄ {l} ‚Üí CCC {lo = lsuc l} {lm = l} (QPER' {l})

_‚Ü¶_ QPERCCC X Y = QPERMor X Y

qf (id QPERCCC X) = Œª x ‚Üí x
qf' (id QPERCCC X) = Œª x ‚Üí x
law (id QPERCCC X) = Œª x ‚Üí x

qf ((QPERCCC ‚àò G) F) = Œª x ‚Üí (qf G) ((qf F) x)
qf' ((QPERCCC ‚àò G) F) = Œª x ‚Üí (qf' G) ((qf' F) x)
law ((QPERCCC ‚àò G) F) = Œª x ‚Üí (law G) ((law F) x)

_‚âÉ_ QPERCCC {X} {Y} F G = ‚àÄ (a : Dom X) ‚Üí ‚àÄ (a' : Cod X) ‚Üí Rel' X a a' ‚Üí Rel' Y (qf F a) (qf' G a')

‚âÉ-refl QPERCCC {X} {Y} {F} a a' = law F
‚âÉ-sym QPERCCC {X} {Y} {F} {G} hxy a a' Raa' = zzc' Y (law G Raa') (law F Raa') (hxy a a' Raa')
‚âÉ-trans QPERCCC {X} {Y} {F} {G} {H} hxy hyz a a' Raa' = zzc' Y (hxy a a' Raa') (hyz a a' Raa') (law G Raa')

ident QPERCCC F = (Œª _ _ ‚Üí law F) , (Œª _ _ ‚Üí law F)
assoc QPERCCC F G H _ _ Raa' = law H (law G (law F Raa'))

Dom (ùüò QPERCCC) = ùüò TypeCCC
Cod (ùüò QPERCCC) = ùüò TypeCCC
Rel' (ùüò QPERCCC) _ _ = ùüò TypeCCC
zzc' (ùüò QPERCCC) h _ _ = h

qf (ùüò-mor QPERCCC X) = Œª a ‚Üí (‚ä•-elim (Level.lower a))
qf' (ùüò-mor QPERCCC X) = Œª a ‚Üí (‚ä•-elim (Level.lower a))
law (ùüò-mor QPERCCC X) = Œª a ‚Üí (‚ä•-elim (Level.lower a))

ùüò-univ QPERCCC _ _ _ _ = Œª a ‚Üí (‚ä•-elim (Level.lower a))

Dom (ùüô QPERCCC) = ùüô TypeCCC
Cod (ùüô QPERCCC) = ùüô TypeCCC
Rel' (ùüô QPERCCC) _ _ = ùüô TypeCCC
zzc' (ùüô QPERCCC) _ _ _ = Level.lift tt

qf (ùüô-mor QPERCCC X) _ = Level.lift tt
qf' (ùüô-mor QPERCCC X) _ = Level.lift tt
law (ùüô-mor QPERCCC X) _ = Level.lift tt

ùüô-univ QPERCCC _ _ _ _ _ = Level.lift tt

Dom ((QPERCCC + X) Y) = Dom X ‚à® Dom Y
Cod ((QPERCCC + X) Y) = Cod X ‚à® Cod Y
Rel' ((QPERCCC + X) Y) (inj‚ÇÅ a) (inj‚ÇÅ b) = Rel' X a b
Rel' ((QPERCCC + X) Y) (inj‚ÇÇ a) (inj‚ÇÇ b) = Rel' Y a b
Rel' ((QPERCCC + X) Y) (inj‚ÇÅ _) (inj‚ÇÇ _) = ùüò TypeCCC
Rel' ((QPERCCC + X) Y) (inj‚ÇÇ _) (inj‚ÇÅ _) = ùüò TypeCCC
zzc' ((QPERCCC + X) Y) {inj‚ÇÅ _} {inj‚ÇÅ _} {inj‚ÇÅ _} {inj‚ÇÅ _} = zzc' X
zzc' ((QPERCCC + X) Y) {inj‚ÇÇ _} {inj‚ÇÇ _} {inj‚ÇÇ _} {inj‚ÇÇ _} = zzc' Y
zzc' ((QPERCCC + X) Y) {inj‚ÇÅ _} {inj‚ÇÇ _} {inj‚ÇÅ _} {b'} _ _ = Œª a ‚Üí (‚ä•-elim (Level.lower a))
zzc' ((QPERCCC + X) Y) {inj‚ÇÅ _} {inj‚ÇÇ _} {inj‚ÇÇ _} {b'} h = ‚ä•-elim (Level.lower h)

qf (i‚ÇÅ QPERCCC) = inj‚ÇÅ
qf' (i‚ÇÅ QPERCCC) = inj‚ÇÅ
law (i‚ÇÅ QPERCCC) h = h

qf (i‚ÇÇ QPERCCC) = inj‚ÇÇ
qf' (i‚ÇÇ QPERCCC) = inj‚ÇÇ
law (i‚ÇÇ QPERCCC) h = h

qf ([ QPERCCC , F ] G) (inj‚ÇÅ a) = qf F a
qf ([ QPERCCC , F ] G) (inj‚ÇÇ b) = qf G b
qf' ([ QPERCCC , F ] G) (inj‚ÇÅ a') = qf' F a'
qf' ([ QPERCCC , F ] G) (inj‚ÇÇ b') = qf' G b'
law ([ QPERCCC , F ] G) {inj‚ÇÅ _} {inj‚ÇÅ _} h = law F h
law ([ QPERCCC , F ] G) {inj‚ÇÇ _} {inj‚ÇÇ _} h = law G h

+-comm QPERCCC F G = (Œª _ _ ‚Üí law F) , (Œª _ _ ‚Üí law G)

+-univ QPERCCC {X} {Y} {Z} F G H (h‚ÇÅ , h‚ÇÇ) (inj‚ÇÅ a) (inj‚ÇÅ a') Raa' = zzc' X (law H Raa') (law F Raa') (h‚ÇÅ a a' Raa')
+-univ QPERCCC {X} {Y} {Z} F G H (h‚ÇÅ , h‚ÇÇ) (inj‚ÇÇ b) (inj‚ÇÇ b') Rbb' = zzc' X (law H Rbb') (law G Rbb') (h‚ÇÇ b b' Rbb')

Dom ((QPERCCC √ó X) Y) = Dom X ‚àß Dom Y
Cod ((QPERCCC √ó X) Y) = Cod X ‚àß Cod Y
Rel' ((QPERCCC √ó X) Y) (a , a') (b , b') = Rel' X a b ‚àß Rel' Y a' b'
zzc' ((QPERCCC √ó X) Y) h‚ÇÅ h‚ÇÇ h‚ÇÉ = zzc' X (proj‚ÇÅ h‚ÇÅ) (proj‚ÇÅ h‚ÇÇ) (proj‚ÇÅ h‚ÇÉ) , zzc' Y (proj‚ÇÇ h‚ÇÅ) (proj‚ÇÇ h‚ÇÇ) (proj‚ÇÇ h‚ÇÉ)

qf (œÄ‚ÇÅ QPERCCC) = proj‚ÇÅ
qf' (œÄ‚ÇÅ QPERCCC) = proj‚ÇÅ
law (œÄ‚ÇÅ QPERCCC) = proj‚ÇÅ

qf (œÄ‚ÇÇ QPERCCC) = proj‚ÇÇ
qf' (œÄ‚ÇÇ QPERCCC) = proj‚ÇÇ
law (œÄ‚ÇÇ QPERCCC) = proj‚ÇÇ

qf (< QPERCCC , F > G) a = qf F a , qf G a
qf' (< QPERCCC , F > G) a' = qf' F a' , qf' G a'
law (< QPERCCC , F > G) Raa' = law F Raa' , law G Raa'

√ó-comm QPERCCC F G = (Œª _ _ ‚Üí law F) , (Œª _ _ ‚Üí law G)

√ó-univ QPERCCC {X} {Y} {Z} F G H (h‚ÇÅ , h‚ÇÇ) a a' Raa' = 
  (zzc' Y (proj‚ÇÅ (law H Raa')) (law F Raa') (h‚ÇÅ a a' Raa')) ,
  (zzc' Z (proj‚ÇÇ (law H Raa')) (law G Raa') (h‚ÇÇ a a' Raa'))

Dom ((QPERCCC ^ Y) X) = Dom X ‚Üí Dom Y
Cod ((QPERCCC ^ Y) X) = Cod X ‚Üí Cod Y
Rel' ((QPERCCC ^ Y) X) = Œª qf g ‚Üí (a : Dom X) (b : Cod X) ‚Üí Rel' X a b ‚Üí Rel' Y (qf a) (g b)
zzc' ((QPERCCC ^ Y) X) h‚ÇÅ h‚ÇÇ h‚ÇÉ = Œª a b h ‚Üí zzc' Y (h‚ÇÅ a b h) (h‚ÇÇ a b h) (h‚ÇÉ a b h)

qf (eval QPERCCC) (a , N) = a N
qf' (eval QPERCCC) (a' , N') = a' N'
law (eval QPERCCC) {a} {a'} (h‚ÇÅ , h‚ÇÇ) = h‚ÇÅ (proj‚ÇÇ a) (proj‚ÇÇ a') h‚ÇÇ

qf (curr QPERCCC F) a N = qf F (a , N)
qf' (curr QPERCCC F) a' N' = qf' F (a' , N')
law (curr QPERCCC F) Raa' _ _ RNN' = law F (Raa' , RNN')

^-comm QPERCCC F _ _ = law F 

^-univ QPERCCC {X} {Y} {Z} F G h a a' Raa' N N' RNN' =   
  zzc' Z (law G Raa' N N' RNN') (law F (Raa' , RNN')) (h (a , N) (a' , N') (Raa' , RNN')) 